{"ast":null,"code":"var _jsxFileName = \"E:\\\\web\\\\chatGPT\\\\pages\\\\index.js\";\nimport AppLayout from \"../component/AppLayout\";\nimport { Input } from \"antd\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  const {\n    0: model,\n    1: setModel\n  } = useState(\"gpt-3.5-turbo\");\n  const {\n    0: answer,\n    1: setAnswer\n  } = useState(\"\");\n  const configuration = new Configuration({\n    apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY\n  });\n  const openai = new OpenAIApi(configuration);\n  async function ask(content, model) {\n    var _res$data$choices$0$m;\n    const res = await openai.createChatCompletion({\n      model: model,\n      messages: [{\n        role: \"user\",\n        content: content\n      }]\n    });\n    setAnswer((_res$data$choices$0$m = res.data.choices[0].message) === null || _res$data$choices$0$m === void 0 ? void 0 : _res$data$choices$0$m.content);\n    console.log(answer);\n  }\n  const onSearch = value => {\n    ask(value, model);\n  };\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    version: \"3.5-turbo\",\n    children: [/*#__PURE__*/_jsxDEV(Input.Search, {\n      placeholder: \"input search text\",\n      onSearch: onSearch,\n      allowClear: true,\n      enterButton: \"Search\",\n      size: \"large\",\n      style: {\n        margin: \"20px 0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input.TextArea, {\n      rows: 20,\n      placeholder: \"Responses from GPT will be displayed here.\",\n      readOnly: true,\n      value: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\nexport default Home;","map":{"version":3,"names":["AppLayout","Input","Configuration","OpenAIApi","useState","jsxDEV","_jsxDEV","Home","model","setModel","answer","setAnswer","configuration","apiKey","process","env","NEXT_PUBLIC_OPENAI_API_KEY","openai","ask","content","_res$data$choices$0$m","res","createChatCompletion","messages","role","data","choices","message","console","log","onSearch","value","version","children","Search","placeholder","allowClear","enterButton","size","style","margin","fileName","_jsxFileName","lineNumber","columnNumber","TextArea","rows","readOnly"],"sources":["E:/web/chatGPT/pages/index.js"],"sourcesContent":["import AppLayout from \"../component/AppLayout\";\r\nimport { Input } from \"antd\";\r\nimport { Configuration, OpenAIApi } from \"openai\";\r\nimport { useState } from \"react\";\r\n\r\nconst Home = () => {\r\n  const [model, setModel] = useState(\"gpt-3.5-turbo\");\r\n  const [answer, setAnswer] = useState(\"\");\r\n\r\n  const configuration = new Configuration({\r\n    apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,\r\n  });\r\n  const openai = new OpenAIApi(configuration);\r\n\r\n  async function ask(content, model) {\r\n    const res = await openai.createChatCompletion({\r\n      model: model,\r\n      messages: [{ role: \"user\", content: content }],\r\n    });\r\n\r\n    setAnswer(res.data.choices[0].message?.content);\r\n    console.log(answer);\r\n  }\r\n\r\n  const onSearch = (value) => {\r\n    ask(value, model);\r\n  };\r\n\r\n  return (\r\n    <AppLayout version=\"3.5-turbo\">\r\n      <Input.Search\r\n        placeholder=\"input search text\"\r\n        onSearch={onSearch}\r\n        allowClear\r\n        enterButton=\"Search\"\r\n        size=\"large\"\r\n        style={{ margin: \"20px 0\" }}\r\n      ></Input.Search>\r\n      <Input.TextArea\r\n        rows={20}\r\n        placeholder=\"Responses from GPT will be displayed here.\"\r\n        readOnly\r\n        value={answer}\r\n      ></Input.TextArea>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,SAASC,KAAK,QAAQ,MAAM;AAC5B,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB,MAAM;IAAA,GAACC,KAAK;IAAA,GAAEC;EAAQ,IAAIL,QAAQ,CAAC,eAAe,CAAC;EACnD,MAAM;IAAA,GAACM,MAAM;IAAA,GAAEC;EAAS,IAAIP,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMQ,aAAa,GAAG,IAAIV,aAAa,CAAC;IACtCW,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;EACtB,CAAC,CAAC;EACF,MAAMC,MAAM,GAAG,IAAId,SAAS,CAACS,aAAa,CAAC;EAE3C,eAAeM,GAAGA,CAACC,OAAO,EAAEX,KAAK,EAAE;IAAA,IAAAY,qBAAA;IACjC,MAAMC,GAAG,GAAG,MAAMJ,MAAM,CAACK,oBAAoB,CAAC;MAC5Cd,KAAK,EAAEA,KAAK;MACZe,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEL,OAAO,EAAEA;MAAQ,CAAC;IAC/C,CAAC,CAAC;IAEFR,SAAS,EAAAS,qBAAA,GAACC,GAAG,CAACI,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,cAAAP,qBAAA,uBAA3BA,qBAAA,CAA6BD,OAAO,CAAC;IAC/CS,OAAO,CAACC,GAAG,CAACnB,MAAM,CAAC;EACrB;EAEA,MAAMoB,QAAQ,GAAIC,KAAK,IAAK;IAC1Bb,GAAG,CAACa,KAAK,EAAEvB,KAAK,CAAC;EACnB,CAAC;EAED,oBACEF,OAAA,CAACN,SAAS;IAACgC,OAAO,EAAC,WAAW;IAAAC,QAAA,gBAC5B3B,OAAA,CAACL,KAAK,CAACiC,MAAM;MACXC,WAAW,EAAC,mBAAmB;MAC/BL,QAAQ,EAAEA,QAAS;MACnBM,UAAU;MACVC,WAAW,EAAC,QAAQ;MACpBC,IAAI,EAAC,OAAO;MACZC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAS;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACd,eAChBtC,OAAA,CAACL,KAAK,CAAC4C,QAAQ;MACbC,IAAI,EAAE,EAAG;MACTX,WAAW,EAAC,4CAA4C;MACxDY,QAAQ;MACRhB,KAAK,EAAErB;IAAO;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACR;AAEhB,CAAC;AAED,eAAerC,IAAI"},"metadata":{},"sourceType":"module"}