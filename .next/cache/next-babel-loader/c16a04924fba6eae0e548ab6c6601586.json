{"ast":null,"code":"var _jsxFileName = \"E:\\\\web\\\\chatGPT\\\\pages\\\\index.js\";\nimport AppLayout from \"../component/AppLayout\";\nimport { Input } from \"antd\";\n//import * as dotenv from \"dotenv\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { useState } from \"react\";\n\n// dotenv.config();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configuration = new Configuration({\n  // apiKey: process.env.OPENAI_API_KEY,\n  apiKey: \"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\"\n});\nconst openai = new OpenAIApi(configuration);\nexport async function ask(content, model) {\n  var _res$data$choices$0$m;\n  const res = await openai.createChatCompletion({\n    model: model,\n    messages: [{\n      role: \"user\",\n      content: content\n    }]\n  });\n  setAnswer((_res$data$choices$0$m = res.data.choices[0].message) === null || _res$data$choices$0$m === void 0 ? void 0 : _res$data$choices$0$m.content);\n  console.log(answer);\n}\nconst Home = () => {\n  const {\n    0: model,\n    1: setModel\n  } = useState(\"gpt-3.5-turbo\");\n  const {\n    0: answer,\n    1: setAnswer\n  } = useState(\"\");\n  const onSearch = value => {\n    ask(value, model);\n  };\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    version: \"3.5-turbo\",\n    children: [/*#__PURE__*/_jsxDEV(Input.Search, {\n      placeholder: \"input search text\",\n      onSearch: onSearch,\n      allowClear: true,\n      enterButton: \"Search\",\n      size: \"large\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input.TextArea, {\n      rows: 4,\n      placeholder: \"Responses from GPT will be displayed here.\",\n      readOnly: true,\n      value: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\nexport default Home;","map":{"version":3,"names":["AppLayout","Input","Configuration","OpenAIApi","useState","jsxDEV","_jsxDEV","configuration","apiKey","openai","ask","content","model","_res$data$choices$0$m","res","createChatCompletion","messages","role","setAnswer","data","choices","message","console","log","answer","Home","setModel","onSearch","value","version","children","Search","placeholder","allowClear","enterButton","size","fileName","_jsxFileName","lineNumber","columnNumber","TextArea","rows","readOnly"],"sources":["E:/web/chatGPT/pages/index.js"],"sourcesContent":["import AppLayout from \"../component/AppLayout\";\r\nimport { Input } from \"antd\";\r\n//import * as dotenv from \"dotenv\";\r\nimport { Configuration, OpenAIApi } from \"openai\";\r\nimport { useState } from \"react\";\r\n\r\n// dotenv.config();\r\nconst configuration = new Configuration({\r\n  // apiKey: process.env.OPENAI_API_KEY,\r\n  apiKey: \"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\",\r\n});\r\nconst openai = new OpenAIApi(configuration);\r\n\r\nexport async function ask(content, model) {\r\n  const res = await openai.createChatCompletion({\r\n    model: model,\r\n    messages: [{ role: \"user\", content: content }],\r\n  });\r\n\r\n  setAnswer(res.data.choices[0].message?.content);\r\n  console.log(answer);\r\n}\r\n\r\nconst Home = () => {\r\n  const [model, setModel] = useState(\"gpt-3.5-turbo\");\r\n  const [answer, setAnswer] = useState(\"\");\r\n\r\n  const onSearch = (value) => {\r\n    ask(value, model);\r\n  };\r\n\r\n  return (\r\n    <AppLayout version=\"3.5-turbo\">\r\n      <Input.Search\r\n        placeholder=\"input search text\"\r\n        onSearch={onSearch}\r\n        allowClear\r\n        enterButton=\"Search\"\r\n        size=\"large\"\r\n      ></Input.Search>\r\n      <Input.TextArea\r\n        rows={4}\r\n        placeholder=\"Responses from GPT will be displayed here.\"\r\n        readOnly\r\n        value={answer}\r\n      ></Input.TextArea>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,SAASC,KAAK,QAAQ,MAAM;AAC5B;AACA,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SAASC,QAAQ,QAAQ,OAAO;;AAEhC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAG,IAAIL,aAAa,CAAC;EACtC;EACAM,MAAM,EAAE;AACV,CAAC,CAAC;AACF,MAAMC,MAAM,GAAG,IAAIN,SAAS,CAACI,aAAa,CAAC;AAE3C,OAAO,eAAeG,GAAGA,CAACC,OAAO,EAAEC,KAAK,EAAE;EAAA,IAAAC,qBAAA;EACxC,MAAMC,GAAG,GAAG,MAAML,MAAM,CAACM,oBAAoB,CAAC;IAC5CH,KAAK,EAAEA,KAAK;IACZI,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEN,OAAO,EAAEA;IAAQ,CAAC;EAC/C,CAAC,CAAC;EAEFO,SAAS,EAAAL,qBAAA,GAACC,GAAG,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,cAAAR,qBAAA,uBAA3BA,qBAAA,CAA6BF,OAAO,CAAC;EAC/CW,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;AACrB;AAEA,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB,MAAM;IAAA,GAACb,KAAK;IAAA,GAAEc;EAAQ,IAAItB,QAAQ,CAAC,eAAe,CAAC;EACnD,MAAM;IAAA,GAACoB,MAAM;IAAA,GAAEN;EAAS,IAAId,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMuB,QAAQ,GAAIC,KAAK,IAAK;IAC1BlB,GAAG,CAACkB,KAAK,EAAEhB,KAAK,CAAC;EACnB,CAAC;EAED,oBACEN,OAAA,CAACN,SAAS;IAAC6B,OAAO,EAAC,WAAW;IAAAC,QAAA,gBAC5BxB,OAAA,CAACL,KAAK,CAAC8B,MAAM;MACXC,WAAW,EAAC,mBAAmB;MAC/BL,QAAQ,EAAEA,QAAS;MACnBM,UAAU;MACVC,WAAW,EAAC,QAAQ;MACpBC,IAAI,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eAChBjC,OAAA,CAACL,KAAK,CAACuC,QAAQ;MACbC,IAAI,EAAE,CAAE;MACRT,WAAW,EAAC,4CAA4C;MACxDU,QAAQ;MACRd,KAAK,EAAEJ;IAAO;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACR;AAEhB,CAAC;AAED,eAAed,IAAI"},"metadata":{},"sourceType":"module"}